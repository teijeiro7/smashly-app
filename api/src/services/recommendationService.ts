import { GoogleGenerativeAI } from "@google/generative-ai";
import {
  FormData,
  MultipleRacketRecommendations,
  Racket,
  RacketComparison,
  RacketRecommendation,
} from "../types";

export class RecommendationService {
  private static genAI: GoogleGenerativeAI | null = null;

  static initialize(apiKey: string) {
    this.genAI = new GoogleGenerativeAI(apiKey);
    console.log("‚úÖ Recommendation service initialized with Gemini AI");
  }

  // Available models to try in order of preference
  private static readonly AVAILABLE_MODELS = [
    "gemini-1.5-flash",
    "gemini-1.5-pro",
    "gemini-pro",
    "models/gemini-1.5-flash",
    "models/gemini-1.5-pro",
  ];

  /**
   * Get a working Gemini model
   */
  private static async getWorkingModel() {
    if (!this.genAI) {
      throw new Error("Gemini AI no est√° configurado. Verifica tu API key.");
    }

    for (const modelName of this.AVAILABLE_MODELS) {
      try {
        const model = this.genAI.getGenerativeModel({ model: modelName });
        console.log(`üîç Testing model: ${modelName}`);
        return { model, modelName };
      } catch (error) {
        console.warn(`‚ö†Ô∏è Model ${modelName} failed:`, error);
        continue;
      }
    }

    throw new Error(
      "Ning√∫n modelo de Gemini est√° disponible. Verifica tu configuraci√≥n."
    );
  }

  /**
   * Get racket recommendations based on user profile
   */
  static async getRacketRecommendations(
    formData: FormData,
    racketDatabase: Racket[]
  ): Promise<MultipleRacketRecommendations> {
    if (!this.genAI) {
      throw new Error("Gemini AI no est√° configurado. Verifica tu API key.");
    }

    try {
      const { model, modelName } = await this.getWorkingModel();
      console.log(`‚úÖ Using model: ${modelName}`);

      // Filter rackets by budget if specified
      let filteredRackets = racketDatabase;
      if (formData.budget && !isNaN(parseFloat(formData.budget))) {
        const budgetLimit = parseFloat(formData.budget);
        filteredRackets = racketDatabase.filter(
          (racket) =>
            racket.precio_actual && racket.precio_actual <= budgetLimit
        );
      }

      // Limit to 100 rackets for better performance
      const limitedRackets = filteredRackets.slice(0, 100);

      // Prepare racket data for analysis
      const racketsList = limitedRackets
        .map((racket) => {
          return `Nombre: ${racket.nombre}
Marca: ${racket.marca || "No especificada"}
Precio: ‚Ç¨${racket.precio_actual || "No disponible"}
Forma: ${racket.caracteristicas_forma || "No especificada"}
Balance: ${racket.caracteristicas_balance || "No especificado"}
Nivel: ${racket.caracteristicas_nivel_de_juego || "No especificado"}
N√∫cleo: ${racket.caracteristicas_nucleo || "No especificado"}
Material cara: ${racket.caracteristicas_cara || "No especificado"}`;
        })
        .join("\n\n---\n\n");

      const prompt = `
Eres un experto en p√°del que debe recomendar exactamente 3 palas de la base de datos proporcionada.

PERFIL DEL USUARIO:
- Nivel de juego: ${formData.gameLevel}
- Estilo de juego: ${formData.playingStyle}
- Peso: ${formData.weight} kg
- Altura: ${formData.height} cm
- Presupuesto m√°ximo: ‚Ç¨${formData.budget}
- Forma preferida: ${formData.preferredShape || "Sin preferencia"}

BASE DE DATOS DE PALAS DISPONIBLES:
${racketsList}

INSTRUCCIONES:
1. Selecciona exactamente 3 palas de la base de datos que mejor se adapten al perfil
2. Ord√©nalas por relevancia (la mejor primera)
3. Para cada pala, proporciona an√°lisis detallado

Responde √öNICAMENTE con un JSON v√°lido en este formato exacto:
{
  "recommendations": [
    {
      "racketName": "Nombre exacto de la pala de la base de datos",
      "brand": "Marca",
      "model": "Modelo",
      "price": "‚Ç¨XXX",
      "imageUrl": "URL_de_imagen_si_disponible",
      "whyThisRacket": "Explicaci√≥n detallada de por qu√© esta pala es perfecta para este usuario (150-200 palabras)",
      "technicalSpecs": {
        "weight": "XXX-XXX gramos",
        "balance": "Medio/Alto/Bajo",
        "shape": "Redonda/L√°grima/Diamante",
        "material": "Fibra de vidrio/Carbono/etc",
        "level": "Principiante/Intermedio/Avanzado"
      },
      "pros": ["Ventaja 1", "Ventaja 2", "Ventaja 3"],
      "cons": ["Consideraci√≥n 1", "Consideraci√≥n 2"],
      "matchPercentage": 95
    }
  ],
  "summary": "Resumen general de las recomendaciones y por qu√© son ideales para este perfil (100-150 palabras)"
}`;

      const result = await model.generateContent(prompt);
      const response = result.response;
      const text = response.text();

      console.log(`üìä Gemini Response Length: ${text.length} characters`);

      try {
        // Clean the response text
        const cleanedText = text
          .replace(/```json\s*/, "")
          .replace(/```\s*$/, "")
          .replace(/^\s*```/, "")
          .replace(/```\s*$/, "")
          .trim();

        const recommendations: MultipleRacketRecommendations =
          JSON.parse(cleanedText);

        // Validate the response
        if (
          !recommendations.recommendations ||
          !Array.isArray(recommendations.recommendations)
        ) {
          throw new Error(
            "Invalid response format: missing recommendations array"
          );
        }

        if (recommendations.recommendations.length === 0) {
          throw new Error("No recommendations received from AI");
        }

        console.log(
          `‚úÖ Successfully parsed ${recommendations.recommendations.length} recommendations`
        );
        return recommendations;
      } catch (parseError) {
        console.error("‚ùå Error parsing Gemini response:", parseError);
        console.log("Raw response:", text);
        throw new Error(
          `Error procesando la respuesta de la IA: ${parseError}`
        );
      }
    } catch (error: any) {
      console.error("‚ùå Error in getRacketRecommendations:", error);
      throw new Error(`Error generando recomendaciones: ${error.message}`);
    }
  }

  /**
   * Compare multiple rackets
   */
  static async compareRackets(rackets: Racket[]): Promise<RacketComparison> {
    if (!this.genAI) {
      throw new Error("Gemini AI no est√° configurado. Verifica tu API key.");
    }

    if (rackets.length < 2) {
      throw new Error("Se necesitan al menos 2 palas para comparar");
    }

    try {
      const { model, modelName } = await this.getWorkingModel();
      console.log(`‚úÖ Using model for comparison: ${modelName}`);

      const racketsData = rackets
        .map((racket) => {
          return `Nombre: ${racket.nombre}
Marca: ${racket.marca || "No especificada"}
Precio: ‚Ç¨${racket.precio_actual || "No disponible"}
Forma: ${racket.caracteristicas_forma || "No especificada"}
Balance: ${racket.caracteristicas_balance || "No especificado"}
Nivel: ${racket.caracteristicas_nivel_de_juego || "No especificado"}
N√∫cleo: ${racket.caracteristicas_nucleo || "No especificado"}
Material cara: ${racket.caracteristicas_cara || "No especificado"}`;
        })
        .join("\n\n---\n\n");

      const prompt = `
Eres un experto en p√°del. Compara las siguientes palas y proporciona un an√°lisis detallado:

PALAS A COMPARAR:
${racketsData}

Responde √öNICAMENTE con un JSON v√°lido en este formato:
{
  "generalAnalysis": "An√°lisis general comparativo de todas las palas (200-300 palabras)",
  "racketAnalysis": [
    {
      "name": "Nombre de la pala",
      "keyAttributes": "Caracter√≠sticas principales",
      "recommendedFor": "Tipo de jugador recomendado",
      "whyThisRacket": "Por qu√© elegir esta pala",
      "pros": ["Ventaja 1", "Ventaja 2", "Ventaja 3"],
      "cons": ["Desventaja 1", "Desventaja 2"],
      "verdict": "Veredicto final sobre esta pala"
    }
  ],
  "finalRecommendation": {
    "bestOverall": "Nombre de la mejor pala en general",
    "bestValue": "Nombre de la pala con mejor relaci√≥n calidad-precio",
    "bestForBeginners": "Nombre de la mejor para principiantes (si aplica)",
    "bestForAdvanced": "Nombre de la mejor para avanzados (si aplica)",
    "reasoning": "Razonamiento de las recomendaciones finales"
  }
}`;

      const result = await model.generateContent(prompt);
      const response = result.response;
      const text = response.text();

      try {
        const cleanedText = text
          .replace(/```json\s*/, "")
          .replace(/```\s*$/, "")
          .replace(/^\s*```/, "")
          .replace(/```\s*$/, "")
          .trim();

        const comparison: RacketComparison = JSON.parse(cleanedText);
        console.log("‚úÖ Successfully parsed racket comparison");
        return comparison;
      } catch (parseError) {
        console.error("‚ùå Error parsing comparison response:", parseError);
        console.log("Raw response:", text);
        throw new Error(`Error procesando la comparaci√≥n: ${parseError}`);
      }
    } catch (error: any) {
      console.error("‚ùå Error in compareRackets:", error);
      throw new Error(`Error comparando palas: ${error.message}`);
    }
  }

  /**
   * Store user interaction for learning purposes
   */
  static async storeUserInteraction(
    userId: string,
    racketId: number,
    interactionType: "view" | "like" | "compare" | "recommend",
    rating?: number,
    metadata?: any
  ): Promise<void> {
    // This would typically store in a database for learning
    // For now, just log the interaction
    console.log("üìä User interaction stored:", {
      userId,
      racketId,
      interactionType,
      rating,
      metadata,
      timestamp: new Date().toISOString(),
    });
  }

  /**
   * Get recommendation history for a user
   */
  static async getRecommendationHistory(userId: string): Promise<any[]> {
    // This would fetch from a database
    // For now, return empty array
    console.log("üìö Fetching recommendation history for user:", userId);
    return [];
  }

  /**
   * Validate form data
   */
  static validateFormData(formData: FormData): {
    isValid: boolean;
    errors: string[];
  } {
    const errors: string[] = [];

    if (!formData.gameLevel) {
      errors.push("Nivel de juego es requerido");
    }

    if (!formData.playingStyle) {
      errors.push("Estilo de juego es requerido");
    }

    if (!formData.weight || isNaN(parseFloat(formData.weight))) {
      errors.push("Peso v√°lido es requerido");
    }

    if (!formData.height || isNaN(parseFloat(formData.height))) {
      errors.push("Altura v√°lida es requerida");
    }

    if (!formData.budget || isNaN(parseFloat(formData.budget))) {
      errors.push("Presupuesto v√°lido es requerido");
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }
}
