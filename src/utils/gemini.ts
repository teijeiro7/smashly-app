import { GoogleGenerativeAI } from "@google/generative-ai";
import {
  FormData,
  MultipleRacketRecommendations,
  Racket,
  RacketComparison,
  RacketRecommendation,
} from "../types/racket";

// Safe access to Vite environment variables
const getEnvVar = (key: string): string | undefined => {
  try {
    // In Vite, environment variables are available on import.meta.env
    const env = (import.meta as any).env;
    return env?.[key];
  } catch (error) {
    console.warn(`Error accessing environment variable ${key}:`, error);
    return undefined;
  }
};

const API_KEY = getEnvVar("VITE_GEMINI_API_KEY");

console.log("üîß Gemini AI Configuration:");
console.log("API_KEY exists:", !!API_KEY);
console.log("Environment:", getEnvVar("MODE") || "unknown");
if (API_KEY) {
  console.log("API_KEY preview:", API_KEY.substring(0, 10) + "...");
}

if (!API_KEY) {
  console.error(
    "‚ö†Ô∏è VITE_GEMINI_API_KEY no encontrada. Verifica tu archivo .env"
  );
  console.log("üí° La variable debe llamarse: VITE_GEMINI_API_KEY");
  try {
    const env = (import.meta as any).env;
    if (env) {
      const availableVars = Object.keys(env).filter(
        (key) => key.startsWith("VITE_") || key.startsWith("EXPO_")
      );
      console.log("Variables disponibles:", availableVars);
    }
  } catch {
    console.log("No se pudieron leer las variables de entorno");
  }
}

const genAI = API_KEY ? new GoogleGenerativeAI(API_KEY) : null;

// Available models to try in order of preference
const AVAILABLE_MODELS = [
  "gemini-1.5-flash",
  "gemini-1.5-pro",
  "gemini-pro",
  "models/gemini-1.5-flash",
  "models/gemini-1.5-pro",
];

// Function to get a working model
async function getWorkingModel() {
  if (!genAI) {
    throw new Error("Gemini AI no est√° configurado. Verifica tu API key.");
  }

  for (const modelName of AVAILABLE_MODELS) {
    try {
      const model = genAI.getGenerativeModel({ model: modelName });
      // Test the model with a simple request
      console.log(`ÔøΩ Testing model: ${modelName}`);
      return { model, modelName };
    } catch (error) {
      console.warn(`‚ö†Ô∏è Model ${modelName} failed:`, error);
      continue;
    }
  }

  throw new Error(
    "Ning√∫n modelo de Gemini est√° disponible. Verifica tu configuraci√≥n."
  );
}

// Main function to get racket recommendations based on user profile
export async function getRacketRecommendations(
  formData: FormData,
  racketDatabase: Racket[]
): Promise<MultipleRacketRecommendations> {
  if (!genAI) {
    throw new Error("Gemini AI no est√° configurado. Verifica tu API key.");
  }

  try {
    const { model, modelName } = await getWorkingModel();
    console.log(`‚úÖ Using model: ${modelName}`);

    // Filter rackets by budget if specified
    let filteredRackets = racketDatabase;
    if (formData.budget && !isNaN(parseFloat(formData.budget))) {
      const budgetLimit = parseFloat(formData.budget);
      filteredRackets = racketDatabase.filter(
        (racket) => racket.precio_actual <= budgetLimit
      );
    }

    const racketsList = filteredRackets
      .slice(0, 50) // Limit to first 50 rackets for prompt efficiency
      .map(
        (racket) =>
          `${racket.nombre} - ${racket.marca} ${racket.modelo} - ‚Ç¨${
            racket.precio_actual
          }${racket.en_oferta ? " (En oferta)" : ""}${
            racket.es_bestseller ? " (Bestseller)" : ""
          }`
      )
      .join("\n");

    const prompt = `
Eres un experto en p√°del especializado en recomendaciones de palas. Bas√°ndote en el perfil del usuario y esta base de datos de palas, proporciona exactamente 3 recomendaciones personalizadas.

PERFIL DEL USUARIO:
- Nivel de juego: ${formData.gameLevel}
- Estilo de juego: ${formData.playingStyle}
- Peso corporal: ${formData.weight} kg
- Altura: ${formData.height} cm
- Presupuesto m√°ximo: ‚Ç¨${formData.budget}
- Forma preferida: ${formData.preferredShape || "Sin preferencia"}

BASE DE DATOS DE PALAS DISPONIBLES:
${racketsList}

INSTRUCCIONES:
1. Selecciona exactamente 3 palas de la base de datos que mejor se adapten al perfil
2. Ord√©nalas por relevancia (la mejor primera)
3. Para cada pala, proporciona an√°lisis detallado

Responde √öNICAMENTE con un JSON v√°lido en este formato exacto:
{
  "recommendations": [
    {
      "racketName": "Nombre exacto de la pala de la base de datos",
      "brand": "Marca",
      "model": "Modelo",
      "price": "‚Ç¨XXX",
      "imageUrl": "URL_de_imagen_si_disponible",
      "whyThisRacket": "Explicaci√≥n detallada de por qu√© esta pala es perfecta para este usuario (150-200 palabras)",
      "technicalSpecs": {
        "weight": "XXX-XXX gramos",
        "balance": "Medio/Alto/Bajo",
        "shape": "Redonda/L√°grima/Diamante",
        "material": "Fibra de vidrio/Carbono/etc",
        "level": "Principiante/Intermedio/Avanzado"
      },
      "pros": ["Ventaja 1", "Ventaja 2", "Ventaja 3"],
      "cons": ["Consideraci√≥n 1", "Consideraci√≥n 2"],
      "matchPercentage": 95
    }
  ],
  "summary": "Resumen general de las recomendaciones y por qu√© estas 3 palas son las mejores opciones para este usuario (100-150 palabras)"
}

IMPORTANTE: 
- Usa SOLO palas que existan en la base de datos proporcionada
- Los nombres deben coincidir exactamente
- Proporciona informaci√≥n t√©cnica realista para cada tipo de pala
- El porcentaje de match debe reflejar qu√© tan bien se adapta cada pala al usuario (85-98%)
- No incluyas texto adicional fuera del JSON
`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    console.log("ü§ñ Respuesta cruda de Gemini:", text);

    // Clean the response to ensure it's valid JSON
    const cleanedText = text
      .replace(/```json\n?/g, "")
      .replace(/\n?```/g, "")
      .trim();

    try {
      const recommendations: MultipleRacketRecommendations =
        JSON.parse(cleanedText);

      // Validate that we have 3 recommendations
      if (
        !recommendations.recommendations ||
        recommendations.recommendations.length !== 3
      ) {
        throw new Error("El AI no proporcion√≥ exactamente 3 recomendaciones");
      }

      // Enhance with actual racket data
      const enhancedRecommendations = recommendations.recommendations.map(
        (rec) => {
          const actualRacket = filteredRackets.find(
            (r) =>
              r.nombre.toLowerCase().includes(rec.racketName.toLowerCase()) ||
              rec.racketName.toLowerCase().includes(r.nombre.toLowerCase())
          );

          if (actualRacket) {
            return {
              ...rec,
              imageUrl: actualRacket.imagen,
              price: `‚Ç¨${actualRacket.precio_actual}`,
            };
          }
          return rec;
        }
      );

      return {
        ...recommendations,
        recommendations: enhancedRecommendations,
      };
    } catch (parseError) {
      console.error("‚ùå Error parsing JSON:", parseError);
      console.error("Texto recibido:", cleanedText);
      throw new Error(
        "Error al procesar la respuesta del AI. Int√©ntalo de nuevo."
      );
    }
  } catch (error) {
    console.error("‚ùå Error en getRacketRecommendations:", error);

    // Provide more specific error messages
    if (error instanceof Error) {
      if (
        error.message.includes("404") ||
        error.message.includes("not found")
      ) {
        throw new Error(
          "Modelo de IA no disponible. Reintentando con un modelo diferente..."
        );
      } else if (error.message.includes("API key")) {
        throw new Error(
          "API key de Gemini inv√°lida. Verifica tu configuraci√≥n."
        );
      } else if (
        error.message.includes("quota") ||
        error.message.includes("rate limit")
      ) {
        throw new Error(
          "L√≠mite de uso de la API alcanzado. Intenta de nuevo m√°s tarde."
        );
      }
      throw new Error(`Error del AI: ${error.message}`);
    }

    throw new Error("Error desconocido del AI");
  }
}

// Function to compare rackets using AI
export async function compareRackets(
  selectedRackets: Racket[]
): Promise<RacketComparison> {
  if (!genAI) {
    throw new Error("Gemini AI no est√° configurado. Verifica tu API key.");
  }

  if (selectedRackets.length < 2 || selectedRackets.length > 3) {
    throw new Error("Debes seleccionar entre 2 y 3 palas para comparar");
  }

  try {
    const { model, modelName } = await getWorkingModel();
    console.log(`‚úÖ Using model for comparison: ${modelName}`);

    const racketsInfo = selectedRackets
      .map(
        (racket, index) =>
          `PALA ${index + 1}: ${racket.nombre}
- Marca: ${racket.marca}
- Modelo: ${racket.modelo}
- Precio: ‚Ç¨${racket.precio_actual}
- En oferta: ${racket.en_oferta ? "S√≠" : "No"}
- Bestseller: ${racket.es_bestseller ? "S√≠" : "No"}
- Descuento: ${racket.en_oferta ? `${racket.descuento_porcentaje}%` : "No"}`
      )
      .join("\n\n");

    const prompt = `
Eres un experto en p√°del con m√°s de 20 a√±os de experiencia. Analiza estas ${selectedRackets.length} palas de p√°del y proporciona una comparaci√≥n profesional:

${racketsInfo}

Proporciona un an√°lisis completo que incluya:
1. An√°lisis general comparativo
2. An√°lisis individual de cada pala
3. Recomendaci√≥n final

Responde √öNICAMENTE con un JSON v√°lido en este formato exacto:
{
  "generalAnalysis": "An√°lisis general comparativo de todas las palas (200-250 palabras). Explica las diferencias principales, relaci√≥n calidad-precio y a qu√© tipo de jugadores se dirige cada una.",
  "racketAnalysis": [
    {
      "name": "Nombre exacto de la pala",
      "keyAttributes": "Forma, peso estimado, balance, nivel recomendado y caracter√≠sticas principales",
      "recommendedFor": "Tipo espec√≠fico de jugador (nivel y estilo de juego)",
      "whyThisRacket": "Razones espec√≠ficas para elegir esta pala sobre las otras",
      "pros": ["Ventaja espec√≠fica 1", "Ventaja espec√≠fica 2", "Ventaja espec√≠fica 3", "Ventaja espec√≠fica 4"],
      "cons": ["Consideraci√≥n o limitaci√≥n 1", "Consideraci√≥n o limitaci√≥n 2", "Consideraci√≥n o limitaci√≥n 3"]
    }
  ],
  "finalRecommendation": "Recomendaci√≥n final detallada sobre cu√°l elegir seg√∫n diferentes perfiles de jugador y por qu√©. Incluye aspectos como relaci√≥n calidad-precio, ofertas actuales si las hay, y casos espec√≠ficos de uso (200-250 palabras)."
}

IMPORTANTE: 
- Usa los nombres exactos de las palas proporcionadas
- S√© espec√≠fico sobre las caracter√≠sticas t√©cnicas de cada pala
- Considera el precio y las ofertas en tu an√°lisis
- Proporciona consejos pr√°cticos y realistas
- No incluyas texto adicional fuera del JSON
`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    console.log("ü§ñ Respuesta de comparaci√≥n de Gemini:", text);

    // Clean the response to ensure it's valid JSON
    const cleanedText = text
      .replace(/```json\n?/g, "")
      .replace(/\n?```/g, "")
      .trim();

    try {
      const comparison: RacketComparison = JSON.parse(cleanedText);

      // Validate the response structure
      if (
        !comparison.generalAnalysis ||
        !comparison.racketAnalysis ||
        !comparison.finalRecommendation
      ) {
        throw new Error("Respuesta del AI incompleta");
      }

      if (comparison.racketAnalysis.length !== selectedRackets.length) {
        throw new Error("El AI no analiz√≥ todas las palas seleccionadas");
      }

      return comparison;
    } catch (parseError) {
      console.error("‚ùå Error parsing comparison JSON:", parseError);
      console.error("Texto recibido:", cleanedText);
      throw new Error(
        "Error al procesar la comparaci√≥n del AI. Int√©ntalo de nuevo."
      );
    }
  } catch (error) {
    console.error("‚ùå Error en compareRackets:", error);

    if (error instanceof Error) {
      if (
        error.message.includes("404") ||
        error.message.includes("not found")
      ) {
        throw new Error(
          "Modelo de IA no disponible para comparaci√≥n. Reintentando..."
        );
      } else if (error.message.includes("API key")) {
        throw new Error(
          "API key de Gemini inv√°lida. Verifica tu configuraci√≥n."
        );
      }
      throw new Error(`Error del AI: ${error.message}`);
    }

    throw new Error("Error desconocido del AI");
  }
}

// Function to get AI analysis for a single racket
export async function getSimpleRacketRecommendation(
  userProfile: FormData
): Promise<RacketRecommendation> {
  if (!genAI) {
    throw new Error("Gemini AI no est√° configurado. Verifica tu API key.");
  }

  try {
    const { model, modelName } = await getWorkingModel();
    console.log(`‚úÖ Using model for simple recommendation: ${modelName}`);

    const prompt = `
Bas√°ndote en este perfil de jugador de p√°del, recomienda el tipo de pala ideal:

PERFIL DEL USUARIO:
- Nivel: ${userProfile.gameLevel}
- Estilo: ${userProfile.playingStyle}
- Peso: ${userProfile.weight} kg
- Altura: ${userProfile.height} cm
- Presupuesto: ‚Ç¨${userProfile.budget}
- Forma preferida: ${userProfile.preferredShape || "Sin preferencia"}

Proporciona una recomendaci√≥n general sobre qu√© tipo de pala buscar.

Responde con un JSON en este formato:
{
  "racketName": "Tipo de pala recomendada",
  "brand": "Recomendaci√≥n de marca",
  "model": "Caracter√≠sticas del modelo",
  "price": "Rango de precio",
  "imageUrl": "",
  "whyThisRacket": "Explicaci√≥n detallada",
  "technicalSpecs": {
    "weight": "Peso recomendado",
    "balance": "Balance recomendado",
    "shape": "Forma recomendada",
    "material": "Material recomendado",
    "level": "Nivel apropiado"
  },
  "pros": ["Ventaja 1", "Ventaja 2", "Ventaja 3"],
  "cons": ["Consideraci√≥n 1", "Consideraci√≥n 2"],
  "matchPercentage": 90
}
`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    const cleanedText = text
      .replace(/```json\n?/g, "")
      .replace(/\n?```/g, "")
      .trim();

    return JSON.parse(cleanedText);
  } catch (error) {
    console.error("‚ùå Error en getSimpleRacketRecommendation:", error);

    if (error instanceof Error) {
      if (
        error.message.includes("404") ||
        error.message.includes("not found")
      ) {
        throw new Error(
          "Modelo de IA no disponible. Verifica la configuraci√≥n."
        );
      }
      throw new Error(`Error del AI: ${error.message}`);
    }

    throw new Error("Error al obtener recomendaci√≥n del AI");
  }
}

export {
  type MultipleRacketRecommendations,
  type Racket,
  type RacketComparison,
  type RacketRecommendation,
};
